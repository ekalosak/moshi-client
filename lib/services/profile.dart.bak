import 'dart:core';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

class ProfileServiceProvider extends StatelessWidget {
  ProfileService profileService;
  final Widget child;

  ProfileServiceProvider({
    required this.profileService,
    required this.child,
  });

  @override
  Widget build(BuildContext context) {
    return Provider<ProfileService>.value(
      value: profileService,
      child: child,
    );
  }
}

class ProfileService {
  final FirebaseAuth _firebaseAuth = FirebaseAuth.instance;
  User? _currentUser;

  AuthService() {
    _firebaseAuth.authStateChanges().listen((user) {
      final String name = user?.displayName ?? 'MissingName';
      print("authStateChange user.displayName: $name");
      _currentUser = user;
    });
  }

  Stream<User?> get authStateChanges => _firebaseAuth.authStateChanges();

  User? get currentUser => _currentUser;

  Future<String?> signInWithEmailAndPassword(String email, String password, BuildContext context) async {
    try {
      UserCredential userCredential = await _firebaseAuth.signInWithEmailAndPassword(
        email: email,
        password: password,
      );
      return userCredential.user!.uid;
    } on FirebaseAuthException catch (e) {
      print("FirebaseAuthException");
      print(e);
      print("FirebaseAuthException.code");
      print(e.code);
      String errorMessage;
      if (e.code == 'user-not-found') {
        errorMessage = 'No user found for that email.';
      } else if (e.code == 'wrong-password') {
        errorMessage = 'Wrong password provided for that user.';
      } else if (e.code == 'unknown') {
        if (e.toString().contains('auth/invalid-email')) {
          errorMessage = 'Email invalid.';
        } else if (e.toString().contains('auth/wrong-password')) {
          errorMessage = 'Wrong password.';
        } else {
          errorMessage = 'An error occurred. Please try again later.';
        }
      } else {
        errorMessage = 'An error occurred. Please try again later.';
      }
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text(errorMessage)),
      );
      return null;
    } catch (e) {
      print("Unknown error");
      print(e);
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('An error occurred. Please try again later.')),
      );
      return null;
    }
  }

  Future<String?> signInWithGoogle(BuildContext context) async {
    try {
      final GoogleSignInAccount? googleUser = await GoogleSignIn().signIn();
      final GoogleSignInAuthentication googleAuth = await googleUser!.authentication;

      final credential = GoogleAuthProvider.credential(
        accessToken: googleAuth.accessToken,
        idToken: googleAuth.idToken,
      );

      final UserCredential userCredential = await _firebaseAuth.signInWithCredential(credential);

      return userCredential.user!.uid;
    } catch (e) {
      print("Unknown error");
      print(e);
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('An error occurred. Please try again later.')),
      );
      return null;
    }
  }

  Future<String?> signUpWithEmailAndPassword(
      String email, String password, String firstName, BuildContext context) async {
    try {
      UserCredential userCredential = await _firebaseAuth.createUserWithEmailAndPassword(
        email: email,
        password: password,
      );

      await userCredential.user!.updateDisplayName(firstName);
      await userCredential.user?.sendEmailVerification();

      final String authToken = userCredential.user!.uid;
      return authToken;
    } on FirebaseAuthException catch (e) {
      print("FirebaseAuthException");
      print(e);
      String errorMessage;
      if (e.code == 'weak-password') {
        errorMessage = 'The password provided is too weak.';
      } else if (e.code == 'unknown') {
        if (e.toString().contains('auth/invalid-email')) {
          errorMessage = 'Email invalid.';
        } else if (e.toString().contains('auth/email-already-in-use')) {
          errorMessage = 'The account already exists for that email.';
        } else if (e.toString().contains('auth/missing-password')) {
          errorMessage = 'Please provide a password.';
        } else {
          errorMessage = 'An error occurred. Please try again later.';
        }
      } else {
        errorMessage = 'An error occurred. Please try again later.';
      }
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text(errorMessage)),
      );
      return null;
    } catch (e) {
      print("Unknown error");
      print(e);
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('An error occurred. Please try again later.')),
      );
      return null;
    }
  }

  // TODO non-brut error handling around signOut
  Future<void> signOut(BuildContext context) async {
    try {
      await _firebaseAuth.signOut(); // NOTE redirect to '/' route is done by caller.
      _currentUser = null; // do this immediately because there might be a delay in the listener.
    } catch (e) {
      print(e);
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('An error occurred. Please try again later.')),
      );
    }
  }

  // TODO non-brut error handling around sendPasswordResetEmail
  Future<String?> sendPasswordResetEmail(String email) async {
    final String? err;
    try {
      await _firebaseAuth.sendPasswordResetEmail(email: email);
      return null;
    } catch (e) {
      print(e);
      RegExp regExp = RegExp(r"\[.*?\]");
      err = "$e".replaceAll(regExp, "");
      return err;
    }
  }
}
